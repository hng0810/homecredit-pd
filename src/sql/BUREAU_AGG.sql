--SELECT CREDIT_TYPE, COUNT(CREDIT_TYPE), MIN(AMT_ANNUITY) AS MINN, ROUND(AVG(AMT_ANNUITY),0) AS AVGG , MAX(AMT_ANNUITY) AS MAXX FROM dbo.bureau WHERE CREDIT_CURRENCY = 'currency 1' AND CREDIT_ACTIVE = 'Active' GROUP BY CREDIT_TYPE

--SELECT SK_ID_BUREAU, CREDIT_ACTIVE, CREDIT_TYPE_2, ROUND(DAYS_CREDIT/365,0) FROM CREDIT_TYPE_TRANSFORMED WHERE DAYS_CREDIT IS NOT NULL ORDER BY CREDIT_TYPE_2, DAYS_CREDIT

--SELECT CREDIT_ACTIVE, CREDIT_TYPE_2, COUNT(*) AS CNT FROM CREDIT_TYPE_TRANSFORMED GROUP BY CREDIT_ACTIVE, CREDIT_TYPE_2 ORDER BY CREDIT_TYPE_2, CREDIT_ACTIVE

WITH MAX_STATUS AS (
    SELECT 
        SK_ID_BUREAU,
        MAX(CASE WHEN MONTHS_BALANCE <= 0 AND MONTHS_BALANCE > -3 AND STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_3M,
        MAX(CASE WHEN MONTHS_BALANCE <= 0 AND MONTHS_BALANCE > -6 AND STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_6M,
        MAX(CASE WHEN MONTHS_BALANCE <= 0 AND MONTHS_BALANCE > -9 AND STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_9M,
        MAX(CASE WHEN MONTHS_BALANCE <= 0 AND MONTHS_BALANCE > -12 AND STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_12M,
        MAX(CASE WHEN MONTHS_BALANCE <= 0 AND MONTHS_BALANCE > -24 AND STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_24M,
        MAX(CASE WHEN STATUS NOT IN ('C','X') THEN TRY_CAST(STATUS AS INT) END) AS MAX_STATUS_ALL
    FROM dbo.bureau_balance
    GROUP BY SK_ID_BUREAU 
),

BUREAU_AGG_1 AS (
    SELECT B.*, 
           MS.MAX_STATUS_3M, MS.MAX_STATUS_6M, MS.MAX_STATUS_9M, MS.MAX_STATUS_12M, MS.MAX_STATUS_24M, MS.MAX_STATUS_ALL,
           CASE WHEN B.CREDIT_TYPE NOT IN ('Microloan', 'Mortgage', 'Car loan', 'Credit card', 'Consumer credit') THEN 'Others' ELSE B.CREDIT_TYPE END AS CREDIT_TYPE_2
    FROM dbo.bureau B
    LEFT JOIN MAX_STATUS MS ON B.SK_ID_BUREAU = MS.SK_ID_BUREAU 
),

BUREAU_AGG AS (
    SELECT SK_ID_CURR,
           ROW_NUMBER() OVER (PARTITION BY SK_ID_CURR ORDER BY SK_ID_BUREAU) RN,
           --SO LUONG KHOAN VAY BUREAU
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' THEN 1 ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS NUM_CREDIT_ACTIVE,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' THEN 1 ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS NUM_CREDIT_ALL,
           --CREDIT LINE GAN NHAT VA XA NHAT VA TRUNG BINH
           MIN(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS EARLIEST_CL_ACTIVE,
           MIN(CASE WHEN CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS EARLIEST_CL_ALL,
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS LATEST_CL_ACTIVE,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS LATEST_CL_ALL,
           AVG(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS MEAN_CL_ACTIVE,
           AVG(CASE WHEN CREDIT_CURRENCY = 'currency 1' THEN DAYS_CREDIT ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS MEAN_CL_ALL,
           --MAX DPD
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' THEN CREDIT_DAY_OVERDUE ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_ACTIVE,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' THEN CREDIT_DAY_OVERDUE ELSE NULL END) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_ALL,
           --AMOUNT CREDIT MAX OVERDUE PHAN THEO CREDIT TYPE
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Microloan' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_MICRO_ACTIVE, 
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Mortgage' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_MORT_ACTIVE,
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Car loan' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CARL_ACTIVE,
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Credit card' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CC_ACTIVE,
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Consumer credit' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CONSUMER_ACTIVE,
           MAX(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Others' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_OTHERS_ACTIVE,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Microloan' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_MICRO, 
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Mortgage' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_MORT,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Car loan' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CARL,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Credit card' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CC,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Consumer credit' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_CONSUMER,
           MAX(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Others' THEN AMT_CREDIT_MAX_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS MAX_OVERDUE_OTHERS,

           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Microloan' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_MICRO_ACTIVE, 
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Mortgage' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_MORT_ACTIVE,
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Car loan' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CARL_ACTIVE,
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Credit card' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CC_ACTIVE,
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Consumer credit' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CONSUMER_ACTIVE,
           SUM(CASE WHEN CREDIT_ACTIVE = 'Active' AND CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Others' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_OTHERS_ACTIVE,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Microloan' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_MICRO, 
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Mortgage' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_MORT,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Car loan' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CARL,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Credit card' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CC,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Consumer credit' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_CONSUMER,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Others' THEN (AMT_CREDIT_SUM + AMT_CREDIT_SUM_DEBT + AMT_CREDIT_SUM_LIMIT) ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS CREDIT_OTHERS,
           --TOTAL AMOUNT OVERDUE
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Microloan' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_MICRO_CURR,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Mortgage' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_MORT_CURR,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Car loan' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_CARL_CURR,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Credit card' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_CC_CURR,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Consumer credit' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_CONSUMER_CURR,
           SUM(CASE WHEN CREDIT_CURRENCY = 'currency 1' AND CREDIT_TYPE_2 = 'Others' THEN AMT_CREDIT_SUM_OVERDUE ELSE 0 END) OVER (PARTITION BY SK_ID_CURR) AS OVERDUE_OTHERS_CURR,

           MAX(MAX_STATUS_3M) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_3M,
           MAX(MAX_STATUS_6M) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_6M,
           MAX(MAX_STATUS_9M) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_9M,
           MAX(MAX_STATUS_12M) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_12M,
           MAX(MAX_STATUS_24M) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_24M,
           MAX(MAX_STATUS_ALL) OVER (PARTITION BY SK_ID_CURR) AS MAX_DPD_ALLTIME

    FROM BUREAU_AGG_1
)

SELECT * 
--INTO dbo.bureau_agg
FROM BUREAU_AGG WHERE RN = 1